# Created 2018-03-12 Mon 14:52
#+OPTIONS: toc:nil
#+DATE: 20/03/2017
#+TITLE: Exercise 7: Matrices
#+AUTHOR: PRAVEEN KUMAR R
#+LATEX_HEADER: \usepackage{palatino}
#+LATEX_HEADER: \usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX: \linespread{1.2}
#+options: num:1
#+PROPERTY: header-args :exports both
| Assignment |              7  |
| Reg No     |    312217104114 |
| Name       | PRAVEEN KUMAR R |
| Grade      |                 |
| Date       |      20-03-2018 |

* Two-dimensional arrays
- Declare and initialize a $2 \times 3$ two-dimensional
  array of integers.
#+LATEX: \linespread{1}
- Initialize the 2d array.
#+LATEX: \linespread{1.2}
- The size of first dimenstion is optional. Initialize the
  2d array, leaving out the first dimension.
#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
#+BEGIN_SRC C
#include<stdio.h>
int main()
{
 int a[2][3]={{1,2,3},{4,5,6}},i,j;

 for(i=0;i<2;i++)
   {
    for(j=0;j<3;j++)
      printf("%d ",a[i][j]);
    printf("\n");
   }
int b[][3]={{1,2,3},{4,5,6},{7,8,9}};
int  n=3;
int  m=3;
printf("\n");
for(i=0;i<m;i++)
   {
    for(j=0;j<n;j++)
      printf("%d ",b[i][j]);
    printf("\n");
   }
return 0;
}

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
| 4 | 5 | 6 |
|   |   |   |
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

* Print a matrix on stdout
Define a function =mat_print()= that prints a matrix. The
function is passed three parameters: matrix =a[M][N]=, and
two shape parameters =m= and =n= (number of rows and
number of columns). The size of the first dimension in
=a[M][N]= is optional. Test the function from =main()=.
#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
#+BEGIN_SRC C :cmdline <Ex07_1_input.in
#include<stdio.h>
void mat_print(int a[20][20],int m,int n)
{
 for(int i=0;i<m;i++)
  {
   for(int j=0;j<n;j++)
     printf("%d ",a[i][j]);
   printf("\n");
  }
}
int main()
{
 int a[20][20],n,m;
 scanf("%d%d",&m,&n);
 for(int i=0;i<m;i++)
   for(int j=0;j<n;j++)
    scanf("%d",&a[i][j]);
 mat_print(a,m,n);
return 0;
}

#+END_SRC

#+RESULTS:
| 26 | -3 |  48 | 21 | 45 |
| 43 | 21 |  24 | 48 | 46 |
| 56 | 67 |  77 | 47 | 38 |
| 63 | 13 | -90 | 80 | 26 |
| 85 | 67 |  98 | 38 | 27 |

* Read a matrix from stdin
Define an input format for matrix. The first line
specifies the number of rows $m$ and columns $n$ of the
matrix. This is followed by $m$ lines. Each of these $m$
lines has $n$ numbers. After $m$ lines, the data for
another matrix may follow. For example, a $3 \times 4$
matrix and a $4 \times 3$ may be formatted in stdin as
follows. Test the function from =main()=.
#+LATEX: \linespread{1}
#+BEGIN_EXAMPLE
3 4
10 20 30 40
50 60 70 80
90 100 110 120
4 3
1 1 1
2 2 2
3 3 3
4 4 4
#+END_EXAMPLE
#+LATEX: \linespread{1.2}
Define a function =mat_read()= for reading a matrix in
this format. It has there results: a matrix and the shape
of the matrix. The shape variables are passed by
reference. Since matrix is a 2-d array, it is already
passed by reference. =a= is a constat pointer to an
integer.
#+LATEX: \linespread{1}
#+BEGIN_SRC C :cmdline <Ex07_3_input.in
#include<stdio.h>
 int mat_read (int a[50][50], int* m, int* n)
  {
  if(scanf("%d%d",m,n)!=EOF)
  {
 for(int i=0;i<*m;i++)
     for(int j=0;j<*n;j++)
       scanf("%d",&a[i][j]);
   return 1;
  }
 else
    return 0;
  }
void mat_print(int a[50][50],int m,int n)
{
   printf("%dx%d\n",m,n);
 for(int i=0;i<m;i++)
  {
   for(int j=0;j<n;j++)
     printf("%d ",a[i][j]);
   printf("\n");
  }
}
int main()
{
  int m,n ;int a[50][50];
  while(mat_read(a,&m,&n)!=0)
     {
        mat_print(a,m,n);
        printf("\n");
     }
}
#+END_SRC

#+RESULTS:
| 2x4 |     |     |   |
|   2 |   2 |  23 | 4 |
|   4 |   2 |   1 | 3 |
|     |     |     |   |
| 5x3 |     |     |   |
|  24 |  46 | 373 |   |
|  73 |  73 | 736 |   |
| 287 |  27 |  82 |   |
|   3 |  73 |  65 |   |
|  35 | 390 |  56 |   |
|     |     |     |   |
| 2x2 |     |     |   |
|   1 |   2 |     |   |
|   3 |   4 |     |   |

#+LATEX: \linespread{1.2}
* Matrix addition

Write a function =mat_add (a, b, c, m, n)= to add two
matrices =a= and =b= of shape =m x n=, and leave the
result in matrix =c=. Test this function and all the
subsequent functions from =main()=.
#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
** Alogorithm
#+BEGIN_EXAMPLE
  def add(a,b,c,m,n):
     for i in range(m):
        for(j in range(n):
            c[i][j]=a[i][j]+b[i][j]
#+END_EXAMPLE
** Specification
1. =mat_read()=:
- input: a[][], a 2D integer array, rows, and coloumns.
- output: =a[0:m][0:n]= with values in m rows and n columns.
2. =mat_print()=:
- input: =a[][]=, a 2D integer array, and dimensions of the matrix
- output: none.
3. =mat_add()=:
- input: =a[][],b[][],c[][]=, 2D integer arrays of dimensions mxn
- output: =c[0:m][0:n]= ,such that =c[i][j]=a[i][j]+b[i][j]=
** Program
#+BEGIN_SRC C :cmdline <Ex07_4_input.in
  #include<stdio.h>
  void mat_read (int a[50][50], int m, int n)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        scanf("%d",&a[i][j]);
  }
  void mat_print(int a[50][50],int m,int n)
  {
    for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
          printf("%d ",a[i][j]);
        printf("\n");
      }
  }
  void mat_add(int a[50][50],int b[50][50],int c[50][50],int m,int n)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        c[i][j]=a[i][j]+b[i][j];
  }
  int main()
  {
    int a[50][50],b[50][50],c[50][50],m,n;
    scanf("%d%d",&m,&n);
    mat_read(a,m,n);
    mat_read(b,m,n);
    mat_print(a,m,n);
    printf("\n");
    mat_print(b,m,n);
    printf("\n");
    mat_add(a,b,c,m,n);
    mat_print(c,m,n);
    return 0;
  }


#+END_SRC
** Test
*** Input
#+BEGIN_EXAMPLE
  4 5
  1   2   3   4   5 
  6   7   8   9  10 
 11  12  13  14  15 
 16  17  18  19  20 
                    
 21  22  23  24  25 
 26  27  28  29  30 
 31  32  33  34  35 
 36  37  38  39  40 
#+END_EXAMPLE
  
*** Output

#+RESULTS:
|  1 |  2 |  3 |  4 |  5 |
|  6 |  7 |  8 |  9 | 10 |
| 11 | 12 | 13 | 14 | 15 |
| 16 | 17 | 18 | 19 | 20 |
|    |    |    |    |    |
| 21 | 22 | 23 | 24 | 25 |
| 26 | 27 | 28 | 29 | 30 |
| 31 | 32 | 33 | 34 | 35 |
| 36 | 37 | 38 | 39 | 40 |
|    |    |    |    |    |
| 22 | 24 | 26 | 28 | 30 |
| 32 | 34 | 36 | 38 | 40 |
| 42 | 44 | 46 | 48 | 50 |
| 52 | 54 | 56 | 58 | 60 |

* Matrix copy
Define a function =mat_copy (a, b, m, n)= that copies a
=m x n= matrix =a= to another matrix =b= of the same
shape. 
#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
** Alogrithm
#+BEGIN_EXAMPLE
  def mat_copy(a,b,m,n):
    for i in range(m):
      for j in range(n):
        b[i][j]=a[i][j]
#+END_EXAMPLE
** Specification
1. =mat_read()=:
- input: a[][], a 2D integer array, rows, and coloumns.
- output: =a[0:m][0:n]= with values in m rows and n columns.
2. =mat_print()=:
- input: =a[][]=, a 2D integer array, and dimensions of the matrix
- output: none.
3. =mat_copy()=:
- input: =a[][],b[][]=, 2D integer arrays of dimensions mxn
- output: =b[0:m][0:n]= ,such that =b[i][j]=a[i][j]=
** Progarm
#+BEGIN_SRC C :cmdline <Ex07_4_input.in
  #include<stdio.h>
  void mat_read (int a[50][50], int m, int n)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        scanf("%d",&a[i][j]);
  }
  void mat_print(int a[50][50],int m,int n)
  {
    for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
          printf("%d ",a[i][j]);
        printf("\n");
      }
  }
  void mat_copy(int a[50][50],int b[50][50],int m,int n)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        b[i][j]=a[i][j];
  }
  int main()
  {
    int a[50][50],b[50][50];
    int m,n;
    scanf("%d%d",&m,&n);
    mat_read(a,m,n);
    mat_read(b,m,n);
    printf("A :\n");
    mat_print(a,m,n);
    mat_copy(a,b,m,n);
    printf("\nB:\n");
    mat_print(b,m,n);
    return 0;
  }

#+END_SRC
** Test
*** Input
#+BEGIN_EXAMPLE
  4 5
  1   2   3   4   5 
  6   7   8   9  10 
 11  12  13  14  15 
 16  17  18  19  20 
#+END_EXAMPLE
  
*** Output
#+RESULTS:
|  A |  : |    |    |    |
|  1 |  2 |  3 |  4 |  5 |
|  6 |  7 |  8 |  9 | 10 |
| 11 | 12 | 13 | 14 | 15 |
| 16 | 17 | 18 | 19 | 20 |
|    |    |    |    |    |
| B: |    |    |    |    |
|  1 |  2 |  3 |  4 |  5 |
|  6 |  7 |  8 |  9 | 10 |
| 11 | 12 | 13 | 14 | 15 |
| 16 | 17 | 18 | 19 | 20 |

* Matrix scale
Write a function =mat_scale (a, b, m, n, f)= that maps
every item of a =m x n= matrix =a= by multiplying it by it
by a factor =f= and assignes the result to a matrix =b=. 
#+BEGIN_EXAMPLE
mat_scale (a, f, b)
  for i := 0 to m-1
    for j := 0 to n-1
       b[j,i] := f * a[i,j]
#+END_EXAMPLE
#+LATEX: \linespread{1.2}
** Alogrithm
#+BEGIN_EXAMPLE
  def mat_copy(a,b,m,n,f):
    for i in range(m):
      for j in range(n):
        b[i][j]=f*a[i][j]
#+END_EXAMPLE
** Specification
1. =mat_read()=:
- input: a[][], a 2D integer array, rows, and coloumns.
- output: =a[0:m][0:n]= with values in m rows and n columns.
2. =mat_print()=:
- input: =a[][]=, a 2D integer array, and dimensions of the matrix
- output: none.
3. =mat_scale()=:
- input: =a[][],b[][]=, 2D integer arrays of dimensions mxn and scaling factor f
- output: =b[0:m][0:n]= ,such that =b[i][j]=f*a[i][j]=
** Program
#+BEGIN_SRC C :cmdline <Ex07_6_input.in
  #include<stdio.h>
  void mat_read (int a[50][50], int m, int n)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        scanf("%d",&a[i][j]);
  }
  void mat_print(int a[50][50],int m,int n)
  {
    for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
          printf("%d ",a[i][j]);
        printf("\n");
      }
  }
  void mat_scale(int a[50][50],int b[50][50],int m,int n,int f)
  {
    for(int i=0;i<m;i++)
      for(int j=0;j<n;j++)
        b[i][j]=f*a[i][j];
  }
  int main()
  {
    int a[50][50],b[50][50];
    int m,n,f;
    scanf("%d%d",&m,&n);
    mat_read(a,m,n);
    scanf("%d",&f);
    printf("A :\n");
    mat_print(a,m,n);
    mat_scale(a,b,m,n,f);
    printf("\nB:\n");
    mat_print(b,m,n);
    return 0;
  }

#+END_SRC
** Test
*** Input
#+BEGIN_EXAMPLE
3 3
 9   8   7
 6   5   4
 3   2   1
6
#+END_EXAMPLE

*** Output
#+RESULTS:
|  A |  : |    |
|  9 |  8 |  7 |
|  6 |  5 |  4 |
|  3 |  2 |  1 |
|    |    |    |
| B: |    |    |
| 54 | 48 | 42 |
| 36 | 30 | 24 |
| 18 | 12 |  6 |

* Matrix transpose

Define a function =mat_transpose (a, b, m, n)= that
assigns the transpose of a =m x n= matrix =a= to matrix
=b=. 

The algorithm for transposing a matrix is
#+LATEX: \linespread{1}
#+BEGIN_EXAMPLE
mat_transpose (a, b)
  for i := 0 to m-1
    for j := 0 to n-1
       b[j,i] := a[i,j]
#+END_EXAMPLE
#+LATEX: \linespread{1.2}
It takes two parameters: an input matrix =a= and an output
matrix =b= in which the result is stored.  Thus, the
function intends to use =a= as a read parameter and =b= as
a write paratemeter.
#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
However, since arrays are passed by reference, actually
both =a= and =b= are writeable. If someone calls the
function as
#+BEGIN_EXAMPLE
mat_transpose (a, a, m, n)  
#+END_EXAMPLE
in which =a= is read and written, the specification will
not be satisfied.  To avoid =a= being used for read and
write simultaneously, we have to use a temporary matrix to
store the transpose and, after the transpose is
constructed completely, copy it in the output array.

#+LATEX: \linespread{1}
#+LATEX: \linespread{1.2}
** Alogrithm
#+BEGIN_EXAMPLE
  def mat_copy(a,b,m,n):
    for i in range(m):
      for j in range(n):
        b[j[i]=a[i][j]
#+END_EXAMPLE
** Specification
1. =mat_read()=:
- input: a[][], a 2D integer array, rows, and coloumns.
- output: =a[0:m][0:n]= with values in m rows and n columns.
2. =mat_print()=:
- input: =a[][]=, a 2D integer array, and dimensions of the matrix
- output: none.
3. =mat_transpose()=:
- input: =a[][],b[][]=, 2D integer arrays of dimensions mxn 
- output: =b[0:m][0:n]= ,such that =b[j][i]=a[i][j]=
** Program
#+BEGIN_SRC C :cmdline <Ex07_4_input.in
#include<stdio.h>
void mat_read (int a[50][50], int m, int n)
 {
 for(int i=0;i<m;i++)
     for(int j=0;j<n;j++)
       scanf("%d",&a[i][j]);
}
void mat_print(int a[50][50],int m,int n)
{
 for(int i=0;i<m;i++)
  {
   for(int j=0;j<n;j++)
     printf("%d ",a[i][j]);
   printf("\n");
  }
}
void mat_copy(int a[50][50],int b[50][50],int m,int n)
{
for(int i=0;i<m;i++)
     for(int j=0;j<n;j++)
      b[j][i]=a[i][j];
}
int main()
{
int a[50][50],b[50][50];
int m,n;
 scanf("%d%d",&m,&n);
mat_read(a,m,n);
mat_read(b,m,n);
printf("A :\n");
mat_print(a,m,n);
mat_copy(a,b,m,n);
printf("\nB:\n");
mat_print(b,n,m);
return 0;
}

#+END_SRC
** Test
*** Input
#+BEGIN_EXAMPLE
  4 5
  1   2   3   4   5 
  6   7   8   9  10 
 11  12  13  14  15 
 16  17  18  19  20 
#+END_EXAMPLE
  
*** Output
#+RESULTS:
|  A |  : |    |    |    |
|  1 |  2 |  3 |  4 |  5 |
|  6 |  7 |  8 |  9 | 10 |
| 11 | 12 | 13 | 14 | 15 |
| 16 | 17 | 18 | 19 | 20 |
|    |    |    |    |    |
| B: |    |    |    |    |
|  1 |  6 | 11 | 16 |    |
|  2 |  7 | 12 | 17 |    |
|  3 |  8 | 13 | 18 |    |
|  4 |  9 | 14 | 19 |    |
|  5 | 10 | 15 | 20 |    |

* Matrix multiplication
Define a function =mat_mul (a, b, c, m, n, p)= that
multplies an =m x n= matrix =a= and an =n x p= matrix =b=
and assigns the result to a =m x p= matrix =c=.

The algorithm for matrix multiplication is as follows.
#+LATEX: \linespread{1}
#+BEGIN_EXAMPLE
matrix_add (a, b, c)
  for i := 0 to m-1
    for j := 0 to p-1
       // dot product of row i and column j
       c[i,j] := 0;
       for k := 0 to n-1:
          c[i,j] := a[i,k] + b [k,j]
#+END_EXAMPLE
#+LATEX: \linespread{1.2}
To avoid writing =a= or =b=, produce the result in a
temporary array =d=, and after the result is completely
produced, save it in =c=.
#+LATEX: \linespread{1}
** Alogrithm
#+BEGIN_EXAMPLE
  def mat_copy(a,b,c,m,q,p):
    for i in range(m):
      for j in range(q):
          c[i][j]=0
          for k in range(p):
            c[i][j]+=a[i][k]*b[k][j]
     
#+END_EXAMPLE
** Specification
1. =mat_read()=:
- input: a[][], a 2D integer array, rows, and coloumns.
- output: =a[0:m][0:n]= with values in m rows and n columns.
2. =mat_print()=:
- input: =a[][]=, a 2D integer array, and dimensions of the matrix
- output: none.
3. =mat_multiply()=:
- input: =a[][],b[][],c[][]=, 2D integer arrays of dimensions mxn and pxq
- output: =b[0:m][0:n]= ,such that c=axb.
** Program
#+BEGIN_SRC C :cmdline <Ex07_8_input.in
#include<stdio.h>
void mat_read (int a[50][50], int m, int n)
 {
 for(int i=0;i<m;i++)
     for(int j=0;j<n;j++)
       scanf("%d",&a[i][j]);
}
void mat_print(int a[50][50],int m,int n)
{
 for(int i=0;i<m;i++)
  {
   for(int j=0;j<n;j++)
     printf("%d ",a[i][j]);
   printf("\n");
  }
}
void mat_mul(int a[50][50],int b[50][50],int c[50][50],int m,int q,int n)
 {
  for(int i=0;i<m;i++)
   {
       for(int j=0;j<q;j++)
          {
            c[i][j]=0;
            for(int k=0;k<n;k++)
                c[i][j]+=a[i][k]*b[k][j];
          } 
  }
}
int main()
{
 int a[50][50],b[50][50],c[50][50],m,n,p,q;
 scanf("%d%d",&m,&n);
 mat_read(a,m,n);
scanf("%d%d",&p,&q);
mat_read(b,p,q);
 mat_mul(a,b,c,m,q,n);
printf("A:\n");
mat_print(a,m,n);
printf("B:\n");
mat_print(b,p,q);
printf("C:\n");
mat_print(c,m,q);
return 0;
} 
  
#+END_SRC
** Test
*** Input
    #+BEGIN_EXAMPLE
     3 3
   1    2   3 
   4    5   6 
   7    8   9 
  3 3        
   9    8   7 
   6    5   4 
   3    2   1 
    #+END_EXAMPLE
*** Output
#+RESULTS:
|  A: |     |    |
|   1 |   2 |  3 |
|   4 |   5 |  6 |
|   7 |   8 |  9 |
|  B: |     |    |
|   9 |   8 |  7 |
|   6 |   5 |  4 |
|   3 |   2 |  1 |
|  C: |     |    |
|  30 |  24 | 18 |
|  84 |  69 | 54 |
| 138 | 114 | 90 |

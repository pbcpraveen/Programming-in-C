% Created 2018-04-14 Sat 23:48
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\usepackage{palatino}
\usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
\usepackage{setspace}
\author{PRAVEEN KUMAR R}
\date{\today}
\title{Exercise 6: Arrays and 2D Arrays}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 24.5.1 (Org mode 8.2.10)}}
\begin{document}

\maketitle
\begin{export}
\linespread{1.2}
\end{export}
\begin{center}
\begin{tabular}{lr}
Assignment & 6\\
Reg No & 312217104114\\
Name & PRAVEEN KUMAR R\\
Grade & \\
Date & 17-03-2018\\
\end{tabular}
\end{center}
\linespread{1}
\section{Boolean functions}
\label{sec-1}
Define the following boolean functions:
\begin{itemize}
\item \texttt{is\_prime(n)} that tests whether a non-negative integer
\texttt{n} is prime or not.
\item \texttt{is\_cube(n)} that tests whether number \texttt{n} is a perfect
cube.
\item \texttt{is\_divisible\_by (n, d)} that tests whether an integer \texttt{n}
     is divisible by integer \texttt{d}.
\end{itemize}
Test these functions from main and print the return values.
\subsection{Specification}
\label{sec-1-1}
2 functions \texttt{is\_prime()}, \texttt{is\_cube()} which takes the number \texttt{n} 
as the input, a function \texttt{is\_divisible()}, which takes 2 numbers
\texttt{n}, \texttt{d} as the inputs and returns a boolean value to the calling
function.
\subsection{Prototype}
\label{sec-1-2}
\begin{verbatim}
bool is_prime(int n);
bool is_cube(int n);
bool is_divisible(int n,int d);
\end{verbatim}
\subsection{Program Design}
\label{sec-1-3}
The program consists of 3 functions \texttt{is\_prime(int n)}, \texttt{is\_cube(int n)}
, \texttt{is\_divisible(int n,int d)} which checks the condition and returns a 
value and \texttt{main()} which reads the numbers from \texttt{stdin} and calls the
functions to test it.
\subsection{Algorithm}
\label{sec-1-4}
\begin{verbatim}
def is_prime(n):
   flag = true
   for i in range(2,n):
      if n%i==0:
         flag=false
         break
   return flag
def is_cube(n):
   flag=false
   i=1
   while i*i*i<=n:
      if i*i*i==n:
         flag=true
         break
   return flag
def is_divisible(n,d):
   flag=false
   if n%d==0:
      flag=true
   return flag
\end{verbatim}
\subsection{Source Code}
\label{sec-1-5}
\begin{verbatim}
#include<stdio.h>
#include<stdbool.h>
bool is_prime(int n)
{
  int i;
  bool flag=true;
  for(i=2;i<n;i++)
    {
      if (n%i==0)
	{
	  flag=false;
	  break;
	}
    }
  return flag;
}
bool is_cube(int n)
{
  int i=1;
  bool flag=false;
  while((i*i*i)<=n)
    {
      if ((i*i*i)==n)
	{
	  flag=true;
	  break;
	}
      i++;
    }
  return flag;
}
bool is_divisible(int n,int d)
{
  bool flag=false;
  if (n%d==0)
    {
      flag=true;
    }
  return flag;
}
int main()
{
  int a,b,c,d;
  bool e,f,g;
  scanf("%d%d%d%d",&a,&b,&c,&d);
  g=is_prime(a);
  f=is_cube(b);
  e=is_divisible(c,d);
  printf("%d\n%d\n%d",g,f,e);
}
\end{verbatim}
\subsection{Test}
\label{sec-1-6}
\subsubsection{Input}
\label{sec-1-6-1}
31 9790 91 13
\subsubsection{Output}
\label{sec-1-6-2}
\begin{center}
\begin{tabular}{r}
1\\
0\\
1\\
\end{tabular}
\end{center}

\section{Sorting}
\label{sec-2}

Sort the list of numbers based on their weights, where
the weight of a number is defined as
\[
   \text{weight}(n) = \begin{cases}
   3 & n \text{ is prime.}\\
   4 & n \text{ is a multiple of 4 and divisible by 6.}\\
   5 & n \text{ is a pefect cube.}
   \end{cases}
   \]
\subsection{algorithm development}
\label{sec-2-1}
\begin{itemize}
\item define 3 different function to check whether
\begin{enumerate}
\item the given number is prime or not (\texttt{is\_prime(n)})
\item the given number is divisible by 4 and 6 or not(\texttt{is\_div(n)})
\item the given number is perfect cube or not(\texttt{is\_cube(n)})
\end{enumerate}
\item define another function to return the sum of all values 
of the above function when they all are called with a
number n.(\texttt{result(n)})
-define a funtion sort that calls reuslt fuction for every 
element in the array and sort the elemets based on this return
value.(\texttt{sort(a,n)})
-By calling the sort function from main() by passing the array 
 and the elements of the array as the parameters we complete the 
 task of sorting the number.
\end{itemize}
\subsection{functions used}
\label{sec-2-2}
\begin{itemize}
\item \texttt{is\_prime(n)}
\end{itemize}
-- input:an integer n
-- output:3, if n is prime, else 0
\begin{itemize}
\item \texttt{is\_div(n)}
\end{itemize}
-- input:an integer n
-- output:4, if n is divisible by 4 and 6, else 0
\begin{itemize}
\item \texttt{is\_cube(n)}
\end{itemize}
-- input:an integer n
--output:5, if n is perfect cube, else 0
\begin{itemize}
\item \texttt{result(n)}
\end{itemize}
-- input:an integer n
-- output: \texttt{is\_prime(n)} +  \texttt{is\_div(n)}  +  \texttt{is\_cube(n)} 
\begin{itemize}
\item \texttt{sort(a,n)}
\end{itemize}
-- input: a,an integer array
        n,an integer (number of elements in the array a) 
-- output: sorted array such that
          \texttt{result(a[0])} <= \texttt{result(a[1])} <= \ldots{}.. \texttt{result(a[n-1])} 
\subsection{program}
\label{sec-2-3}
\begin{verbatim}
#include<stdio.h>
int is_prime(int n)
{
  int f=0;
  int i=1;
  while(i<=n)
    {
      if(n%i==0)
	f++;
      i++;

    }
  if(f==2)
    return 3;
  else
    return 0; 
}
int is_div(int n)
{
  if(n%4==0&&n%6==0)
    return 4;
  else 
    return 0;
}
int is_cube(int n)
{
  int flag=0;
  for(int j=1;j*j*j<=n;j++)
    if(j*j*j==n)
      {
	flag=1;
	break;
      }
  if(flag)
    return 5;
  else 
    return 0;
}
int result(int n)
{
  return is_prime(n)+is_div(n)+is_cube(n);
}
void sort(int a[],int n)
{
  int i,j;
  int temp;
  for(int i=0;i<n-1;i++)
    {
      int min=i;
      for(int j=i+1;j<n;j++)
	if(result(a[j])<result(a[min]))
	  min=j;
      temp=a[i];
      a[i]=a[min];
      a[min]=temp;
    }
}
int main()
{
  int a[100];
  int n;
  scanf("%d",&n);
  for(int i=0;i<n;i++)
    scanf("%d",&a[i]);
  for(int i=0;i<n;i++)
    printf("%d %c",a[i],i<n-1?',':'\n');
  sort(a,n);
  for(int i=0;i<n;i++)
    printf("%d : %d\n",a[i],result(a[i])); 
}
\end{verbatim}
\subsection{Test}
\label{sec-2-4}
\subsubsection{Input}
\label{sec-2-4-1}
24 1245 34 55 34 125 86 443
\subsubsection{Output}
\label{sec-2-4-2}
\begin{center}
\begin{tabular}{rlrlllll}
24 & ,1245 & ,34 & ,55 & ,34 & ,125 & ,86 & ,443\\
1245 & : & 0 &  &  &  &  & \\
34 & : & 0 &  &  &  &  & \\
55 & : & 0 &  &  &  &  & \\
34 & : & 0 &  &  &  &  & \\
86 & : & 0 &  &  &  &  & \\
443 & : & 3 &  &  &  &  & \\
24 & : & 4 &  &  &  &  & \\
125 & : & 5 &  &  &  &  & \\
\end{tabular}
\end{center}


\section{BMI calculation}
\label{sec-3}
\begin{enumerate}
\item Populate an array \texttt{heights[N]} with heights of persons
and find how many persons are above the average height.
\end{enumerate}
\subsection{algorithm development}
\label{sec-3-1}
\begin{itemize}
\item first define a funtion to find the average of n numbers 
present in the array.
\item once the average is computed each element in the array 
is compared with the average and if the element is greater than 
the  average then the count of number of such element is increamented
\end{itemize}
\subsection{functions used}
\label{sec-3-2}
\begin{itemize}
\item \texttt{cal\_avg}
   -- input: a, an interger array. 
n, an integer denoting the number of elements in the array.
\end{itemize}
\subsection{program}
\label{sec-3-3}
\begin{verbatim}
#include<stdio.h>
float cal_avg(int a[],int n)
{
 float sum=0;
 for(int i=0;i<n;i++)
    sum+=a[i];
 return sum/n;
}
int main()
{
 int a[100],n;
 scanf("%d",&n);
 for(int i=0;i<n;i++)
  scanf("%d",&a[i]);
for(int i=0;i<n;i++)
  printf("%d%c",a[i],i<n-1?',':'\n');
 float avg= cal_avg(a,n);
 int count=0;
 for(int i=0;i<n;i++)
   if(avg<a[i])
      count++;
 printf("\n%d",count);
return 0;
}
\end{verbatim}

\begin{center}
\begin{tabular}{l}
23,43,56,43,31,24,33,22\\
\\
3\\
\end{tabular}
\end{center}

\begin{enumerate}
\item Populate a two dimensional array \texttt{a[N][N]} with heights
and weights of persons and compute the Body Mass Index
(BMI) of the individuals. \texttt{a[i][0]} and \texttt{a[i][1]} are the
height and weight of \texttt{i} th person.  BMI is defined as
\[
   \text{BMI} = \cfrac{\text{weight}}{\text{height}^2}
   \]
where weight is in kg and height is in m.
\begin{verbatim}
#include<stdio.h>
void calc_bmi(float a[100][2],int n,float bmi[100])
{
  for(int i=0;i<n;i++)
    {
      bmi[i]=a[i][1]/(a[i][0]*a[i][0]);
    }
}
int main()
{
  float a[100][2],bmi[100];
  int n;
  scanf("%d",&n);
  for(int i=0;i<n;i++)
    scanf("%f%f",&a[i][1],&a[i][0]);
  calc_bmi(a,n,bmi);
  printf("weight\theight\tBMI\n");
  for(int i=0;i<n;i++)
    {
      printf("%f \t %f \t %f \n",a[i][1],a[i][0],bmi[i]);
    } 
}
\end{verbatim}
\end{enumerate}
\subsection{Test}
\label{sec-3-4}
\subsubsection{Input}
\label{sec-3-4-1}
\begin{verbatim}
5
45 1.50
60.1 2.01
89.50 2.2
38.40 1.4
77.20 1.84
\end{verbatim}

\subsubsection{Output}
\label{sec-3-4-2}
\begin{center}
\begin{tabular}{rrr}
weight & height & BMI\\
45.0 & 1.5 & 20.0\\
60.099998 & 2.01 & 14.875869\\
89.5 & 2.2 & 18.491735\\
38.400002 & 1.4 & 19.591839\\
77.199997 & 1.84 & 22.802456\\
\end{tabular}
\end{center}
% Emacs 24.5.1 (Org mode 8.2.10)
\end{document}
